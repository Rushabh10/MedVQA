"""
Given the directory where the  image files are saved, this generates a processed 
pickle file (.pkl) containing a mapping between the image ids and their image embeddings generated by vgg16 or resnet152 models

python vectorize_images.py --data_dir ../Dataset --model_type vgg16
"""

from __future__ import print_function
import errno
import os
import numpy as np
from PIL import Image
import torch
import torch.nn as nn
import torch.nn.functional as F
import torchvision.models as models
import torchvision.transforms as transforms
from torch.utils.data import Dataset
import collections
import numpy as np
import pickle
from torch.autograd import Variable
import time
import argparse

device = torch.device("cuda" if torch.cuda.is.available() else 'cpu')

def load_folder(folder, suffix):
    """
    gets all image paths in a given folder ending with a given suffix
    """
    imgs = []
    for f in sorted(os.listdir(folder)):
        if f.endswith(suffix):
            imgs.append(os.path.join(folder, f))
    return imgs


def load_imageid(folder):
    """
    gets a set of unique image ids from the dataset directory
    """
    images = load_folder(folder, 'jpg')
    img_ids = set()
    for img in images:
        img_id = int(img.split('/')[-1].split('.')[0].split('_')[-1])
        img_ids.add(img_id)
    return img_ids


def pil_loader(path):
    """
    load a given image onto memory
    """
    with open(path, 'rb') as f:
        with Image.open(f) as img:
            return img.convert('RGB')


# model_type -> vgg16, resnet152
def vectorize(dataset, image_ids, data_dir, output_size=1024, model_type = 'vgg16'):
    """
    loads a pre-trained CNN model based on the model type specified, performs an inference step on every image in the dataset to obtain the embeddings
    saves the image id to embedding mapping as a dictionary to a pickle file
    loading this and using reduces training time significantly as we are avoiding the inference step during training
    """
    img_id_embedding_map = {}
    # Load the pretrained model
    if model_type == 'vgg16':
        model = models.vgg16(weights = models.VGG16_Weights.IMAGENET1K_V1)
        model.classifier = nn.Sequential(*list(model.classifier)[:-1])
    elif model_type == 'resnet152':
        model = models.resnet152(weights = models.ResNet152_Weights.IMAGENET1K_V2)
        model = torch.nn.Sequential(*(list(model.children())[:-1]))
    else:
        raise Exception(f'Model Type {model_type} is not supported')

    model = model.to(device)
    for param in model.parameters():
        param.requires_grad = False
    
    transform = transforms.Compose([
            transforms.Resize((224, 224)),
            transforms.ToTensor(),
            transforms.Normalize(
                mean=[0.485, 0.456, 0.406],
                std=[0.229, 0.224, 0.225])])
    i = 0
    for img_id in image_ids:
        image_path = data_dir + "/reformatted" + img_id + '.jpg'
        img = pil_loader(image_path)
        
        img_tensor = Variable(transform(img).unsqueeze(0))
        img_tensor = img_tensor.to(device)
        i+=1
        if i % 10 == 0:
            print(i)
        embedding = model(img_tensor)
        embedding = embedding.detach().cpu().numpy()[0]
        img_id_embedding_map[img_id] = embedding
    
    print("saving image embeddings file for ",dataset," ... ")
    with open(os.path.join(data_dir, dataset + f"_image_embeddings_new_{model_type}.pkl"), 'wb') as f:
        pickle.dump(img_id_embedding_map, f)

def get_ids(dataset):
    """
    gets a set of unique image ids from the dataset directory
    """
    f = open(dataset)
    data = f.read().split('\n')
    image_ids = [row.split('\t')[0] for row in data]
    image_ids = image_ids[:len(image_ids)-1]
    image_ids = list(set(image_ids))
    return image_ids

def main():
    parser = argparse.ArgumentParser(description='Calculate Image embeddings for the CNN model')
    parser.add_argument('--data_dir',   type=str, help='directory to store the embeddings', default='/home/an3729/datasets')
    parser.add_argument('--model_type', type=str, help='Type of CNN for the Image Encoder', choices=['vgg16', 'resnet152'], default='vgg16')
    args = parser.parse_args()

    train_image_id_list = get_ids(args.data_dir+'/train_data.txt')
    val_image_id_list = get_ids(args.data_dir+'/val_data.txt')
    vectorize('train2014', train_image_id_list, model_type = args.model_type, data_dir=args.data_dir)
    vectorize('val2014', val_image_id_list, model_type = args.model_type, data_dir=args.data_dir)

if __name__ == "__main__":
    main()
